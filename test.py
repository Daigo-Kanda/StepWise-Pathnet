import argparse
import datetime
import os
import sys

import tensorflow as tf
from tensorflow import keras

import ITrackerData_Person as data_gen


def main(args):
    gpus = tf.config.experimental.list_physical_devices('GPU')
    if gpus:
        # Restrict TensorFlow to only use the first GPU
        try:
            tf.config.experimental.set_visible_devices(gpus[0], 'GPU')
            logical_gpus = tf.config.experimental.list_logical_devices('GPU')
            print(len(gpus), "Physical GPUs,", len(logical_gpus), "Logical GPU")
        except RuntimeError as e:
            # Visible devices must be set before GPUs have been initialized
            print(e)

    # 画像サイズの設定
    image_shape = (args.image_size, args.image_size, 3)

    model = keras.models.load_model(args.trained_model)

    # generator setting
    # For this test, use validation data
    test_generator = data_gen.ITrackerData(args.dataset_dir, 'validation', (args.image_size, args.image_size), (25, 25),
                                           args.batch_size)

    # compile
    model.compile(optimizer='adam', loss='mse', metrics=['mae'])

    now = datetime.datetime.now()

    # callbacks
    cbks = [keras.callbacks.CSVLogger(
        os.path.join(args.save_dir, 'scratch_%s_%s.csv' % ("eye_tracking", now.strftime('%Y%m%d_%H%M%S'))))]

    # Fit the model on the batches generated by datagen.flow().
    history = model.evaluate_generator(
        generator=test_generator,
        epochs=args.epochs,
        verbose=1,
    )

def getParser():
    parser = argparse.ArgumentParser()

    # データセットのディレクトリ
    parser.add_argument('dataset_dir')

    # ログの保存先ディレクトリ
    parser.add_argument('save_dir')

    # （テスト用）学習済みモデルの設定
    parser.add_argument('--trained_model', default=None)

    # 画像サイズ
    parser.add_argument('--image_size', type=int, default=224)

    # バッチサイズ
    parser.add_argument('--batch_size', type=int, default=16)

    # エポック
    parser.add_argument('--epochs', type=int, default=60)

    return parser


# 引数の読み込み
if __name__ == '__main__':
    parser = getParser()

    args = parser.parse_args()

    print('----PARSED ARGS----\n%s\n-----------------' % args)

    main(args)
