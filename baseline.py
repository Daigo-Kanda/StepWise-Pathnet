import argparse
import datetime
import os
import sys

import tensorflow as tf
from tensorflow import keras

import ITrackerData_person_tensor as data_gen

from tensorflow.keras.callbacks import CSVLogger

CSVLogger.on_test_begin = CSVLogger.on_train_begin
CSVLogger.on_test_batch_end = CSVLogger.on_epoch_end
CSVLogger.on_test_end = CSVLogger.on_train_end


def main(args):
    # 画像サイズの設定
    image_shape = (args.image_size, args.image_size, 3)

    model = tf.keras.models.load_model(args.trained_model)

    # generator setting
    data = data_gen.getData(batch_size=args.batch_size, memory_size=120, dataset_path=args.dataset_dir)
    validation_generator = data[1]
    train_generator = data[0]

    now = datetime.datetime.now()

    if not os.path.exists(args.save_dir):
        os.makedirs(args.save_dir)

    # callbacks
    cbks = [CSVLogger(
        os.path.join(args.save_dir, 'baseline_%s_%s.csv' % ("val", now.strftime('%Y%m%d_%H%M%S'))))]

    # Fit the model on the batches generated by datagen.flow().
    history = model.evaluate(
        x=validation_generator,
        verbose=1,
        callbacks=cbks,
    )

    tf.keras.backend.clear_session()


def getParser():
    parser = argparse.ArgumentParser()

    # N回回す実験用のアレ
    parser.add_argument('learning_number', help='for sequential experiment')

    # データセットのディレクトリ
    parser.add_argument('dataset_dir')

    # ログの保存先ディレクトリ
    parser.add_argument('save_dir')

    # クラス数
    parser.add_argument('--num_classes', type=int, default=100)

    # 学習データの画像数
    #   CIFAR10: 50000, CIFAR100: 50000
    parser.add_argument('--num_images_train', type=int, default=50000, help='CIFAR10: 50000, CIFAR100: 50000')

    # テストデータの画像数
    #   CIFAR10: 10000, CIFAR100: 10000
    parser.add_argument('--num_images_test', type=int, default=10000, help='CIFAR10: 10000, CIFAR100: 10000')

    # 画像サイズ
    parser.add_argument('--image_size', type=int, default=224)

    # バッチサイズ
    parser.add_argument('--batch_size', type=int, default=16)

    # エポック
    parser.add_argument('--epochs', type=int, default=60)

    # GPU並列
    parser.add_argument('--n_gpu', type=int, default=1)

    # CPU並列
    parser.add_argument('--n_thread', type=int, default=1)

    # CPU(スレッド)並列
    #   fit_generatorでスレッド並列するとデッドロックする臭い？
    #   https://github.com/keras-team/keras/issues/10340
    parser.add_argument('--use_multiprocessing', action='store_true')

    # 水増しの有無
    parser.add_argument('--dont_augment', action='store_false')

    # （テスト用）学習済みモデルの設定
    parser.add_argument('--trained_model', default=None)

    # 使う学習済みモデル
    parser.add_argument('--model_name', default='vgg16',
                        help='name of pre-trained network. this is disable by giving --trained_model')
    return parser


# 引数の読み込み
if __name__ == '__main__':
    parser = getParser()

    args = parser.parse_args()

    print('----PARSED ARGS----\n%s\n-----------------' % args)

    main(args)
